// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PeepoGuessrApi.Databases;

#nullable disable

namespace PeepoGuessrApi.Migrations
{
    [DbContext(typeof(AccountDbContext))]
    [Migration("20230625120015_AccountDbV0.2")]
    partial class AccountDbV02
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PeepoGuessrApi.Entities.Databases.Account.Division", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("MaxScore")
                        .HasColumnType("integer");

                    b.Property<int>("MinScore")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Divisions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MaxScore = 399,
                            MinScore = 0,
                            Name = "Novichok"
                        },
                        new
                        {
                            Id = 2,
                            MaxScore = 899,
                            MinScore = 400,
                            Name = "Smesharik"
                        },
                        new
                        {
                            Id = 3,
                            MaxScore = 1500,
                            MinScore = 900,
                            Name = "Gandon"
                        });
                });

            modelBuilder.Entity("PeepoGuessrApi.Entities.Databases.Account.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GameStatusId")
                        .HasColumnType("integer");

                    b.Property<int>("GameTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GameStatusId");

                    b.HasIndex("GameTypeId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("PeepoGuessrApi.Entities.Databases.Account.GameStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("GameStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Active"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Canceled"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Completed"
                        });
                });

            modelBuilder.Entity("PeepoGuessrApi.Entities.Databases.Account.GameType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("GameTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Singleplayer"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Multiplayer"
                        },
                        new
                        {
                            Id = 3,
                            Name = "PartyBattle"
                        },
                        new
                        {
                            Id = 4,
                            Name = "RandomEvents"
                        });
                });

            modelBuilder.Entity("PeepoGuessrApi.Entities.Databases.Account.Map", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsClassic")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Maps");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsClassic = true,
                            Name = "PPL6MP1",
                            Url = "ppl6n1"
                        },
                        new
                        {
                            Id = 2,
                            IsClassic = true,
                            Name = "PPL6MP2",
                            Url = "ppl6n2"
                        });
                });

            modelBuilder.Entity("PeepoGuessrApi.Entities.Databases.Account.Round", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<int>("MapId")
                        .HasColumnType("integer");

                    b.Property<double>("PosX")
                        .HasColumnType("double precision");

                    b.Property<double>("PosY")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("MapId");

                    b.ToTable("Rounds");
                });

            modelBuilder.Entity("PeepoGuessrApi.Entities.Databases.Account.RoundSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Damage")
                        .HasColumnType("integer");

                    b.Property<double>("Distance")
                        .HasColumnType("double precision");

                    b.Property<int>("Health")
                        .HasColumnType("integer");

                    b.Property<double?>("PosX")
                        .HasColumnType("double precision");

                    b.Property<double?>("PosY")
                        .HasColumnType("double precision");

                    b.Property<int>("RoundId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoundId");

                    b.HasIndex("UserId");

                    b.ToTable("RoundSummaries");
                });

            modelBuilder.Entity("PeepoGuessrApi.Entities.Databases.Account.Summary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DivisionId")
                        .HasColumnType("integer");

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("Summaries");
                });

            modelBuilder.Entity("PeepoGuessrApi.Entities.Databases.Account.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DivisionId")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.Property<string>("TwitchId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Update")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Wins")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DivisionId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PeepoGuessrApi.Entities.Databases.Account.Game", b =>
                {
                    b.HasOne("PeepoGuessrApi.Entities.Databases.Account.GameStatus", "GameStatus")
                        .WithMany()
                        .HasForeignKey("GameStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PeepoGuessrApi.Entities.Databases.Account.GameType", "GameType")
                        .WithMany("Games")
                        .HasForeignKey("GameTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameStatus");

                    b.Navigation("GameType");
                });

            modelBuilder.Entity("PeepoGuessrApi.Entities.Databases.Account.Round", b =>
                {
                    b.HasOne("PeepoGuessrApi.Entities.Databases.Account.Game", "Game")
                        .WithMany("Rounds")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PeepoGuessrApi.Entities.Databases.Account.Map", "Map")
                        .WithMany()
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Map");
                });

            modelBuilder.Entity("PeepoGuessrApi.Entities.Databases.Account.RoundSummary", b =>
                {
                    b.HasOne("PeepoGuessrApi.Entities.Databases.Account.Round", "Round")
                        .WithMany("RoundSummaries")
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PeepoGuessrApi.Entities.Databases.Account.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Round");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PeepoGuessrApi.Entities.Databases.Account.Summary", b =>
                {
                    b.HasOne("PeepoGuessrApi.Entities.Databases.Account.Game", "Game")
                        .WithMany("Summaries")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PeepoGuessrApi.Entities.Databases.Account.User", "User")
                        .WithMany("Summaries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PeepoGuessrApi.Entities.Databases.Account.User", b =>
                {
                    b.HasOne("PeepoGuessrApi.Entities.Databases.Account.Division", "Division")
                        .WithMany("Users")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Division");
                });

            modelBuilder.Entity("PeepoGuessrApi.Entities.Databases.Account.Division", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("PeepoGuessrApi.Entities.Databases.Account.Game", b =>
                {
                    b.Navigation("Rounds");

                    b.Navigation("Summaries");
                });

            modelBuilder.Entity("PeepoGuessrApi.Entities.Databases.Account.GameType", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("PeepoGuessrApi.Entities.Databases.Account.Round", b =>
                {
                    b.Navigation("RoundSummaries");
                });

            modelBuilder.Entity("PeepoGuessrApi.Entities.Databases.Account.User", b =>
                {
                    b.Navigation("Summaries");
                });
#pragma warning restore 612, 618
        }
    }
}
